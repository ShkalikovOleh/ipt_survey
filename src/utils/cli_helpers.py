import argparse
from enum import Enum
from itertools import product
from typing import Any

from src.teachers_db import Speciality, Stream


class EnumAction(argparse.Action):
    """
    Argparse action for handling Enums
    https://stackoverflow.com/questions/43968006/support-for-enum-arguments-in-argparse
    """

    def __init__(self, **kwargs):
        enum_type = kwargs.pop("type", None)

        # Ensure an Enum subclass is provided
        if enum_type is None:
            raise ValueError("type must be assigned an Enum when using EnumAction")
        if not issubclass(enum_type, Enum):
            raise TypeError("type must be an Enum when using EnumAction")

        kwargs.setdefault("choices", tuple(e.value for e in enum_type))

        super(EnumAction, self).__init__(**kwargs)

        self._enum = enum_type

    def __call__(
        self,
        parser: argparse.ArgumentParser,
        namespace: argparse.Namespace,
        value: Any,
        option_string: str = None,
    ):
        # Convert value back into an Enum
        if isinstance(value, str):
            value = self._enum(value)
            setattr(namespace, self.dest, value)
        elif value is None:
            raise argparse.ArgumentTypeError(
                f"You need to pass a value after {option_string}!"
            )
        else:
            # A pretty invalid choice message will be generated by argparse
            raise argparse.ArgumentTypeError()


class ParseStreamAction(argparse.Action):
    def __init__(self, **kwargs):
        self._enum = Speciality

        kwargs.setdefault(
            "choices",
            tuple(f"{e.value}-{y}" for e, y in product(Speciality, range(10))),
        )

        super(ParseStreamAction, self).__init__(**kwargs)

    def __call__(self, parser, namespace, value, option_string=None):
        try:
            speciality, year_str = value.split("-")
        except ValueError:
            raise argparse.ArgumentTypeError(
                f"Invalid stream format: '{value}'. Expected 'Speciality-Year' (e.g., 'F1-5')."
            )

        if isinstance(value, str):
            speciality = self._enum(speciality)
            setattr(namespace, self.dest, value)
        else:
            raise argparse.ArgumentTypeError()

        setattr(namespace, self.dest, Stream(speciality, year_str))
